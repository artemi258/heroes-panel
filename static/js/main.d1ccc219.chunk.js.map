{"version":3,"sources":["api/apiSlice.js","hooks/http.hook.js","components/heroesList/heroesSlice.js","components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/filtersSlice.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","store/index.js","index.js"],"names":["apiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getHeroes","query","providesTags","createHero","mutation","hero","url","method","body","invalidatesTags","deleteHero","id","reducer","middleware","useGetHeroesQuery","useCreateHeroMutation","useDeleteHeroMutation","useHttp","request","a","headers","fetch","response","ok","Error","status","json","data","heroesAdapter","createEntityAdapter","initialState","getInitialState","heroesLoadingStatus","fetchHeroes","createAsyncThunk","heroesSlice","createSlice","name","reducers","createdHero","state","action","addOne","payload","removeOne","extraReducers","addCase","pending","fulfilled","setAll","rejected","addDefaultCase","actions","selectAll","getSelectors","heroes","createSelector","filters","activeFilter","filter","item","element","heroesFetchingError","heroesFetching","heroesFetched","HeroesListItem","elementClassName","description","useDispatch","className","src","alt","style","onClick","onDeleteHeroes","type","aria-label","Spinner","role","HeroesList","isLoading","isError","useSelector","filteredHeroes","useMemo","slice","CSSTransition","timeout","classNames","arr","elements","length","map","props","TransitionGroup","component","HeroesAddForm","useState","uuidv4","setData","option","setOption","dispatch","useEffect","onRequest","then","res","splice","onOptionLoaded","catch","form","onSubmit","e","bindPostData","htmlFor","required","value","onChange","target","placeholder","preventDefault","finalData","Object","assign","unwrap","filtersAdapter","filtersLoadingStatus","fetchFilters","filterActiv","filtersFetching","filtersFetched","HeroesFilters","filtersFetchingError","finalFilters","i","App","store","configureStore","api","geetDefaultMiddleware","concat","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1ccc219.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react';\r\n\r\nexport const apiSlice = createApi({\r\n    reducerPath: 'api',\r\n    baseQuery: fetchBaseQuery({baseUrl: 'http://localhost:3001'}),\r\n    tagTypes: ['Heroes'],\r\n    endpoints: builder => ({\r\n        getHeroes: builder.query({\r\n            query: () => '/heroes',\r\n            providesTags: ['Heroes']\r\n        }),\r\n        createHero: builder.mutation({\r\n            query: hero => ({\r\n                url: '/heroes',\r\n                method: 'POST',\r\n                body: hero\r\n            }),\r\n            invalidatesTags: ['Heroes']\r\n        }),\r\n        deleteHero: builder.mutation({\r\n            query: id => ({\r\n                url: `/heroes/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            invalidatesTags: ['Heroes']\r\n        })\r\n    })\r\n})\r\n\r\nconst { reducer, middleware } = apiSlice;\r\n\r\nexport const { useGetHeroesQuery, useCreateHeroMutation, useDeleteHeroMutation } = apiSlice;\r\nexport { middleware };\r\n\r\nexport default reducer;","\nexport const useHttp = () => {\n\n    const request = async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            throw e;\n        }\n    };\n\n    return {request}\n}","import { createSlice, createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport { createSelector } from '@reduxjs/toolkit'\r\nimport { useHttp } from \"../../hooks/http.hook\";\r\n\r\n// const initialState = {\r\n//     heroes: [],\r\n//     heroesLoadingStatus: 'idle'\r\n// }\r\n\r\nconst heroesAdapter = createEntityAdapter();\r\n\r\nconst initialState = heroesAdapter.getInitialState({\r\n    heroesLoadingStatus: 'idle'\r\n});\r\n\r\nexport const fetchHeroes = createAsyncThunk(\r\n    'heroes/fetchHeroes',\r\n    () => {\r\n        const {request} = useHttp();\r\n        return request(\"http://localhost:3001/heroes\")\r\n    }\r\n)\r\n\r\nconst heroesSlice = createSlice({\r\n    name: 'heroes',\r\n    initialState,\r\n    reducers: {\r\n        createdHero: (state, action) => {heroesAdapter.addOne(state, action.payload)},\r\n        deleteHero: (state, action) => {heroesAdapter.removeOne(state, action.payload)}\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchHeroes.pending, state => {state.heroesLoadingStatus = 'loading'})\r\n            .addCase(fetchHeroes.fulfilled, (state, action) => {\r\n                state.heroesLoadingStatus = 'idle';\r\n                heroesAdapter.setAll(state, action.payload);\r\n            })\r\n            .addCase(fetchHeroes.rejected, state => {state.heroesLoadingStatus = 'error'})\r\n            .addDefaultCase(() => {})\r\n    }\r\n});\r\n\r\n\r\nconst {reducer, actions} = heroesSlice;\r\nconst {selectAll} = heroesAdapter.getSelectors(state => state.heroes);\r\n\r\nexport const filterHeroesSelector = createSelector(\r\n    state => state.filters.activeFilter,\r\n    selectAll,\r\n    (filter, heroes) => {\r\n            if (filter === 'Все') {\r\n                return heroes;\r\n            } else {\r\n            return heroes.filter(item => item.element === filter)\r\n            }\r\n    }\r\n)\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n    heroesFetching,\r\n    heroesFetched,\r\n    heroesFetchingError,\r\n    createdHero,\r\n    deleteHero\r\n} = actions;","import { useHttp } from \"../../hooks/http.hook\";\nimport { useDispatch } from 'react-redux';\nimport { useDeleteHeroMutation } from \"../../api/apiSlice\";\n\n\nimport { heroesFetchingError, deleteHero } from '../heroesList/heroesSlice';\nimport '../app/app.scss';\n\nconst HeroesListItem = ({id, name, description, element}) => {\n\n    const {request} = useHttp();\n    const dispatch = useDispatch();\n\n    const [deleteHero] = useDeleteHeroMutation();\n\n    let elementClassName;\n\n    switch (element) {\n        case 'Огонь':\n            elementClassName = 'bg-danger bg-gradient';\n            break;\n        case 'Вода':\n            elementClassName = 'bg-primary bg-gradient';\n            break;\n        case 'Ветер':\n            elementClassName = 'bg-success bg-gradient';\n            break;\n        case 'Земля':\n            elementClassName = 'bg-secondary bg-gradient';\n            break;\n        default:\n            elementClassName = 'bg-warning bg-gradient';\n    }\n\n    const onDeleteHeroes = (id) => {\n        deleteHero(id);\n        //     request(`http://localhost:3001/heroes/${id}`, 'DELETE')\n        // .then(() => dispatch(deleteHero(id)))\n        // .catch(() => dispatch(heroesFetchingError()));\n    }\n\n    return (\n                <li \n                className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}>\n                <img src=\"http://www.stpaulsteinbach.org/wp-content/uploads/2014/09/unknown-hero.jpg\" \n                    className=\"img-fluid w-25 d-inline\" \n                    alt=\"unknown hero\" \n                    style={{'objectFit': 'cover'}}/>\n                <div className=\"card-body\">\n                    \n                    <h3 className=\"card-title\">{name}</h3>\n                    <p className=\"card-text\">{description}</p>\n                </div>\n                <span onClick={() => onDeleteHeroes(id)} className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\">\n                    <button type=\"button\" className=\"btn-close btn-close\" aria-label=\"Close\"></button>\n                </span>\n            </li>\n    )\n}\n\nexport default HeroesListItem;","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { useSelector} from 'react-redux';\nimport { useMemo } from 'react';\n\nimport { useGetHeroesQuery } from '../../api/apiSlice';\nimport HeroesListItem from \"../heroesListItem/HeroesListItem\";\nimport Spinner from '../spinner/Spinner';\n\n// Задача для этого компонента:\n// При клике на \"крестик\" идет удаление персонажа из общего состояния\n// Усложненная задача:\n// Удаление идет и с json файла при помощи метода DELETE\n\nconst HeroesList = () => {\n\n    const {\n        data: heroes = [],\n        isLoading,\n        isError\n    } = useGetHeroesQuery()\n\n    const activeFilter = useSelector(state => state.filters.activeFilter);\n\n    const filteredHeroes = useMemo(\n        () => {\n            const filteredHeroes = heroes.slice();\n            if (activeFilter === 'Все') {\n                return filteredHeroes;\n            } else {\n            return filteredHeroes.filter(item => item.element === activeFilter)\n            }\n    }, [heroes, activeFilter])\n\n    if (isLoading) {\n        return <Spinner/>;\n    } else if (isError) {\n        return <CSSTransition key={'error'} timeout={1000} classNames=\"fade\">\n                    <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n                </CSSTransition>\n    }\n\n    const renderHeroesList = (arr) => {\n        if (arr.length === 0) {\n            return <CSSTransition key={'empty'} timeout={1000} classNames=\"fade\">\n                        <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n                    </CSSTransition>\n        }\n        const content = arr.map(({id, ...props}) =>  {\n                          return <CSSTransition key={id} timeout={1000} classNames=\"fade\">\n                                    <HeroesListItem key={id} id={id} {...props}/>\n                                 </CSSTransition>\n                        });\n                    \n                            return content\n    }\n    const elements = renderHeroesList(filteredHeroes);\n            return (\n                <TransitionGroup component={'ul'}>\n                    {elements}\n                </TransitionGroup>                      \n            )\n}\n\nexport default HeroesList;","import { useHttp } from \"../../hooks/http.hook\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport {  createdHero, heroesFetchingError } from '../heroesList/heroesSlice';\r\nimport { useCreateHeroMutation } from \"../../api/apiSlice\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Задача для этого компонента:\r\n// Реализовать создание нового героя с введенными данными. Он должен попадать\r\n// в общее состояние и отображаться в списке + фильтроваться\r\n// Уникальный идентификатор персонажа можно сгенерировать через uiid\r\n// Усложненная задача:\r\n// Персонаж создается и в файле json при помощи метода POST\r\n// Дополнительно:\r\n// Элементы <option></option> желательно сформировать на базе\r\n// данных из фильтров\r\n\r\nconst HeroesAddForm = () => {\r\n\r\n    const [data, setData] = useState({id: uuidv4(), name: '', description: '', element: ''});\r\n    const [option, setOption] = useState([]);\r\n    const dispatch = useDispatch();\r\n    const {request} = useHttp();\r\n\r\n    const [createHero] = useCreateHeroMutation();\r\n\r\n    const onChangeName = (e) => {\r\n        setData({...data, name: e.target.value});\r\n    }\r\n    const onChangeDescription = (e) => {\r\n        setData({...data, description: e.target.value});\r\n    }\r\n    const onChangeElement = (e) => {\r\n        setData({...data, element: e.target.value});\r\n    }\r\n\r\n    useEffect(() => {\r\n        onRequest();\r\n                // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = () => {\r\n        request('http://localhost:3001/filters')\r\n                .then(res => res.splice(1))\r\n                .then(onOptionLoaded)\r\n                .catch(() => dispatch(heroesFetchingError()))\r\n    }\r\n\r\n    const onOptionLoaded = (option) => {\r\n        setOption(option); \r\n    }\r\n\r\n    const content = () => {\r\n       return option.map(item => {\r\n            return <option key={item.id} value={item.filter}>{item.filter}</option>\r\n        })\r\n    }\r\n\r\n    const form = <form className=\"border p-4 shadow-lg rounded\" onSubmit={(e) => bindPostData(e)}>\r\n    <div className=\"mb-3\">\r\n        <label htmlFor=\"name\" className=\"form-label fs-4\">Имя нового героя</label>\r\n        <input \r\n            required\r\n            type=\"text\" \r\n            name=\"name\" \r\n            className=\"form-control\" \r\n            id=\"name\"\r\n            value={data.name}\r\n            onChange={ onChangeName }\r\n            placeholder=\"Как меня зовут?\"/>\r\n    </div>\r\n\r\n    <div className=\"mb-3\">\r\n        <label htmlFor=\"text\" className=\"form-label fs-4\">Описание</label>\r\n        <textarea\r\n            required\r\n            name=\"text\" \r\n            className=\"form-control\" \r\n            id=\"text\"\r\n            value={data.description}\r\n            onChange={onChangeDescription}\r\n            placeholder=\"Что я умею?\"\r\n            style={{\"height\": '130px'}}/>\r\n    </div>\r\n\r\n    <div className=\"mb-3\">\r\n        <label htmlFor=\"element\" className=\"form-label\">Выбрать элемент героя</label>\r\n        <select \r\n            required\r\n            className=\"form-select\" \r\n            id=\"element\"\r\n            value={data.element}\r\n            onChange={onChangeElement}\r\n            name=\"element\">\r\n            <option>Я владею элементом...</option>\r\n            {content()}\r\n        </select>\r\n    </div>\r\n\r\n    <button type=\"submit\" className=\"btn btn-primary\">Создать</button>\r\n</form>;\r\n\r\n    const clearForm = () => {\r\n        setData({\r\n            id: '',\r\n            name: '',\r\n            description: '',\r\n            element: ''\r\n        })\r\n    }\r\n    \r\n    const bindPostData = (e) => {\r\n        e.preventDefault();\r\n        const finalData = Object.assign({id: uuidv4()}, data)\r\n        // const postData = JSON.stringify(finalData)\r\n        createHero(finalData).unwrap();\r\n            // request('http://localhost:3001/heroes', 'POST', postData)\r\n            // .then(data => dispatch(createdHero(data)))\r\n            // .catch(() => dispatch(heroesFetchingError()))\r\n            // .finally(() => clearForm())\r\n    }\r\n    return (\r\n        <>\r\n            {form}\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default HeroesAddForm;","import { createSlice, createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport { useHttp } from \"../../hooks/http.hook\";\r\n\r\n// const initialState = {\r\n//     activeFilter: 'Все',\r\n//     filters: [],\r\n//     filtersLoadingStatus: 'idle'\r\n// }\r\n\r\nconst filtersAdapter = createEntityAdapter();\r\n\r\nconst initialState = filtersAdapter.getInitialState({\r\n    activeFilter: 'Все',\r\n    filtersLoadingStatus: 'idle'\r\n});\r\n\r\nexport const fetchFilters = createAsyncThunk(\r\n    'filters/fetchFilters',\r\n    () => {\r\n        const {request} = useHttp();\r\n        return request(\"http://localhost:3001/filters\")\r\n    }\r\n)\r\n\r\nconst filters = createSlice({\r\n    name: 'filters',\r\n    initialState,\r\n    reducers: {\r\n        filterActiv: (state, action) => {state.activeFilter = action.payload}\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchFilters.pending, state => {state.filtersLoadingStatus = 'loading'})\r\n            .addCase(fetchFilters.fulfilled, (state, action) => {\r\n                filtersAdapter.setAll(state, action.payload);\r\n                state.filtersLoadingStatus = 'idle';\r\n            })\r\n            .addCase(fetchFilters.rejected, state => {state.filtersLoadingStatus = 'error'})\r\n    }\r\n});\r\n\r\n\r\nconst {reducer, actions} = filters;\r\n\r\nexport const {selectAll} = filtersAdapter.getSelectors(state => state.filters);\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n    filtersFetching,\r\n    filtersFetched,\r\n    filterActiv,\r\n    filtersFetchingError\r\n} = actions;","import { useEffect } from \"react\";\r\nimport { filterActiv, fetchFilters, selectAll} from './filtersSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\n// Задача для этого компонента:\r\n// Фильтры должны формироваться на основании загруженных данных\r\n// Фильтры должны отображать только нужных героев при выборе\r\n// Активный фильтр имеет класс active\r\n// Изменять json-файл для удобства МОЖНО!\r\n// Представьте, что вы попросили бэкенд-разработчика об этом\r\n\r\nconst HeroesFilters = () => {\r\n\r\n    const { filtersLoadingStatus, activeFilter } = useSelector(state => state.filters);\r\n    const finalFilters = useSelector(state => selectAll(state))\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        onRequest();\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n\r\n    const onRequest = () => {\r\n        dispatch(fetchFilters())\r\n    }\r\n\r\n    if (filtersLoadingStatus === \"loading\") {\r\n        return <Spinner/>;\r\n    } else if (filtersLoadingStatus === \"error\") {\r\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\r\n    }\r\n\r\n    let elementClassName;\r\n\r\n\r\n    const content = () => {\r\n        return finalFilters.map((item, i) => {\r\n        \r\n            switch (item.filter) {\r\n                case 'Все':\r\n                    elementClassName = 'btn btn-outline-dark';\r\n                    break;\r\n                case 'Огонь':\r\n                    elementClassName = 'btn btn-danger';\r\n                    break;\r\n                case 'Вода':\r\n                    elementClassName = 'btn btn-primary';\r\n                    break;\r\n                case 'Ветер':\r\n                    elementClassName = 'btn btn-success';\r\n                    break;\r\n                case 'Земля':\r\n                    elementClassName = 'btn btn-secondary';\r\n                    break;\r\n                default:\r\n                    elementClassName = 'bg-warning bg-gradient';\r\n             }\r\n\r\n            return <button key={i} onClick={() => dispatch(filterActiv(item.filter))} className={` ${elementClassName} ${item.filter === activeFilter ? 'active' : ''}`}>{item.filter}</button>\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"card shadow-lg mt-4\">\r\n            <div className=\"card-body\">\r\n                <p className=\"card-text\">Отфильтруйте героев по элементам</p>\r\n                <div className=\"btn-group\">\r\n                    {content()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroesFilters;","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport heroes from '../components/heroesList/heroesSlice';\nimport filters from '../components/heroesFilters/filtersSlice';\nimport api from '../api/apiSlice';\nimport { middleware } from '../api/apiSlice';\n\n// const store = createStore(combineReducers({heroes, filters}),\n//                 compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()))\n\n\nconst store = configureStore({\n    reducer: {heroes, filters, api},\n    middleware: geetDefaultMiddleware => geetDefaultMiddleware().concat(middleware),\n    devTools: process.env.NODE_ENV !== 'production'\n})\n\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app/App';\nimport store from './store';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}